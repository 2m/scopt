Index.PACKAGES = {"scopt" : [{"name" : "scopt.OptionDef", "shortDescription" : "", "members_class" : [{"label" : "fullName", "tail" : "(): String", "member" : "scopt.OptionDef.fullName", "link" : "scopt\/OptionDef.html#fullName:String", "kind" : "def"}, {"label" : "shortDescription", "tail" : "(): String", "member" : "scopt.OptionDef.shortDescription", "link" : "scopt\/OptionDef.html#shortDescription:String", "kind" : "def"}, {"label" : "children", "tail" : "(xs: OptionDef[_, C]*): OptionDef[A, C]", "member" : "scopt.OptionDef.children", "link" : "scopt\/OptionDef.html#children(xs:scopt.OptionDef[_,C]*):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "hidden", "tail" : "(): OptionDef[A, C]", "member" : "scopt.OptionDef.hidden", "link" : "scopt\/OptionDef.html#hidden():scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "validate", "tail" : "(f: (A) ⇒ Either[String, Unit]): OptionDef[A, C]", "member" : "scopt.OptionDef.validate", "link" : "scopt\/OptionDef.html#validate(f:A=>Either[String,Unit]):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "keyValueName", "tail" : "(k: String, v: String): OptionDef[A, C]", "member" : "scopt.OptionDef.keyValueName", "link" : "scopt\/OptionDef.html#keyValueName(k:String,v:String):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "keyName", "tail" : "(x: String): OptionDef[A, C]", "member" : "scopt.OptionDef.keyName", "link" : "scopt\/OptionDef.html#keyName(x:String):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "valueName", "tail" : "(x: String): OptionDef[A, C]", "member" : "scopt.OptionDef.valueName", "link" : "scopt\/OptionDef.html#valueName(x:String):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "text", "tail" : "(x: String): OptionDef[A, C]", "member" : "scopt.OptionDef.text", "link" : "scopt\/OptionDef.html#text(x:String):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "unbounded", "tail" : "(): OptionDef[A, C]", "member" : "scopt.OptionDef.unbounded", "link" : "scopt\/OptionDef.html#unbounded():scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "maxOccurs", "tail" : "(n: Int): OptionDef[A, C]", "member" : "scopt.OptionDef.maxOccurs", "link" : "scopt\/OptionDef.html#maxOccurs(n:Int):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "optional", "tail" : "(): OptionDef[A, C]", "member" : "scopt.OptionDef.optional", "link" : "scopt\/OptionDef.html#optional():scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "required", "tail" : "(): OptionDef[A, C]", "member" : "scopt.OptionDef.required", "link" : "scopt\/OptionDef.html#required():scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "minOccurs", "tail" : "(n: Int): OptionDef[A, C]", "member" : "scopt.OptionDef.minOccurs", "link" : "scopt\/OptionDef.html#minOccurs(n:Int):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "abbr", "tail" : "(x: String): OptionDef[A, C]", "member" : "scopt.OptionDef.abbr", "link" : "scopt\/OptionDef.html#abbr(x:String):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scopt.OptionDef.toString", "link" : "scopt\/OptionDef.html#toString():String", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ Unit): OptionDef[A, C]", "member" : "scopt.OptionDef.foreach", "link" : "scopt\/OptionDef.html#foreach(f:A=>Unit):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "action", "tail" : "(f: (A, C) ⇒ C): OptionDef[A, C]", "member" : "scopt.OptionDef.action", "link" : "scopt\/OptionDef.html#action(f:(A,C)=>C):scopt.OptionDef[A,C]", "kind" : "def"}, {"member" : "scopt.OptionDef#<init>", "error" : "unsupported entity"}, {"member" : "scopt.OptionDef#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/OptionDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/OptionDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/OptionDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/OptionDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/OptionDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/OptionDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/OptionDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/OptionDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/OptionDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/OptionDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/OptionDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/OptionDef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/OptionDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/OptionDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/OptionDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/OptionDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/OptionDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/OptionDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "scopt\/OptionDef.html", "kind" : "class"}, {"name" : "scopt.OptionParser", "shortDescription" : "HtmlTag(<code>scopt.immutable.OptionParser<\/code>) is instantiated within your object,set up by an (ordered) sequence of invocations ofthe various builder methods such asHtmlTag(<a href=\"#opt[A](Char,String)(Read[A]):OptionDef[A,C]\"><code>opt<\/code><\/a>) method orHtmlTag(<a href=\"#arg[A](String)(Read[A]):OptionDef[A,C]\"><code>arg<\/code><\/a>) method.HtmlTag(<\/a>)HtmlTag(<\/a>)HtmlTag(<\/code>)", "members_case class" : [{"label" : "parse", "tail" : "(args: Seq[String], init: C): Option[C]", "member" : "scopt.OptionParser.parse", "link" : "scopt\/OptionParser.html#parse(args:Seq[String],init:C):Option[C]", "kind" : "def"}, {"label" : "parse", "tail" : "(args: Seq[String])(ev: Zero[C]): Boolean", "member" : "scopt.OptionParser.parse", "link" : "scopt\/OptionParser.html#parse(args:Seq[String])(implicitev:scopt.Zero[C]):Boolean", "kind" : "def"}, {"label" : "makeDef", "tail" : "(kind: OptionDefKind, name: String)(arg0: Read[A]): OptionDef[A, C]", "member" : "scopt.OptionParser.makeDef", "link" : "scopt\/OptionParser.html#makeDef[A](kind:scopt.OptionDefKind,name:String)(implicitevidence$11:scopt.Read[A]):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "checks", "tail" : "(): Seq[OptionDef[_, C]]", "member" : "scopt.OptionParser.checks", "link" : "scopt\/OptionParser.html#checks:Seq[scopt.OptionDef[_,C]]", "kind" : "def"}, {"label" : "commands", "tail" : "(): Seq[OptionDef[_, C]]", "member" : "scopt.OptionParser.commands", "link" : "scopt\/OptionParser.html#commands:Seq[scopt.OptionDef[_,C]]", "kind" : "def"}, {"label" : "arguments", "tail" : "(): Seq[OptionDef[_, C]]", "member" : "scopt.OptionParser.arguments", "link" : "scopt\/OptionParser.html#arguments:Seq[scopt.OptionDef[_,C]]", "kind" : "def"}, {"label" : "nonArgs", "tail" : "(): Seq[OptionDef[_, C]]", "member" : "scopt.OptionParser.nonArgs", "link" : "scopt\/OptionParser.html#nonArgs:Seq[scopt.OptionDef[_,C]]", "kind" : "def"}, {"label" : "heads", "tail" : "(): Seq[OptionDef[_, C]]", "member" : "scopt.OptionParser.heads", "link" : "scopt\/OptionParser.html#heads:Seq[scopt.OptionDef[_,C]]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Either[String, Unit]", "member" : "scopt.OptionParser.failure", "link" : "scopt\/OptionParser.html#failure(msg:String):Either[String,Unit]", "kind" : "def"}, {"label" : "success", "tail" : "(): Either[String, Unit]", "member" : "scopt.OptionParser.success", "link" : "scopt\/OptionParser.html#success:Either[String,Unit]", "kind" : "def"}, {"label" : "usageExample", "tail" : "(): String", "member" : "scopt.OptionParser.usageExample", "link" : "scopt\/OptionParser.html#usageExample:String", "kind" : "def"}, {"label" : "optionsForRender", "tail" : "(): List[OptionDef[_, C]]", "member" : "scopt.OptionParser.optionsForRender", "link" : "scopt\/OptionParser.html#optionsForRender:List[scopt.OptionDef[_,C]]", "kind" : "def"}, {"label" : "renderTwoColumnsUsage", "tail" : "(): String", "member" : "scopt.OptionParser.renderTwoColumnsUsage", "link" : "scopt\/OptionParser.html#renderTwoColumnsUsage:String", "kind" : "def"}, {"label" : "renderOneColumnUsage", "tail" : "(): String", "member" : "scopt.OptionParser.renderOneColumnUsage", "link" : "scopt\/OptionParser.html#renderOneColumnUsage:String", "kind" : "def"}, {"label" : "renderUsage", "tail" : "(mode: RenderingMode): String", "member" : "scopt.OptionParser.renderUsage", "link" : "scopt\/OptionParser.html#renderUsage(mode:scopt.RenderingMode):String", "kind" : "def"}, {"label" : "usage", "tail" : "(): String", "member" : "scopt.OptionParser.usage", "link" : "scopt\/OptionParser.html#usage:String", "kind" : "def"}, {"label" : "showUsageAsError", "tail" : "(): Unit", "member" : "scopt.OptionParser.showUsageAsError", "link" : "scopt\/OptionParser.html#showUsageAsError():Unit", "kind" : "def"}, {"label" : "showUsage", "tail" : "(): Unit", "member" : "scopt.OptionParser.showUsage", "link" : "scopt\/OptionParser.html#showUsage():Unit", "kind" : "def"}, {"label" : "header", "tail" : "(): String", "member" : "scopt.OptionParser.header", "link" : "scopt\/OptionParser.html#header:String", "kind" : "def"}, {"label" : "showHeader", "tail" : "(): Unit", "member" : "scopt.OptionParser.showHeader", "link" : "scopt\/OptionParser.html#showHeader():Unit", "kind" : "def"}, {"label" : "checkConfig", "tail" : "(f: (C) ⇒ Either[String, Unit]): OptionDef[Unit, C]", "member" : "scopt.OptionParser.checkConfig", "link" : "scopt\/OptionParser.html#checkConfig(f:C=>Either[String,Unit]):scopt.OptionDef[Unit,C]", "kind" : "def"}, {"label" : "version", "tail" : "(name: String): OptionDef[Unit, C]", "member" : "scopt.OptionParser.version", "link" : "scopt\/OptionParser.html#version(name:String):scopt.OptionDef[Unit,C]", "kind" : "def"}, {"label" : "help", "tail" : "(name: String): OptionDef[Unit, C]", "member" : "scopt.OptionParser.help", "link" : "scopt\/OptionParser.html#help(name:String):scopt.OptionDef[Unit,C]", "kind" : "def"}, {"label" : "cmd", "tail" : "(name: String): OptionDef[Unit, C]", "member" : "scopt.OptionParser.cmd", "link" : "scopt\/OptionParser.html#cmd(name:String):scopt.OptionDef[Unit,C]", "kind" : "def"}, {"label" : "arg", "tail" : "(name: String)(arg0: Read[A]): OptionDef[A, C]", "member" : "scopt.OptionParser.arg", "link" : "scopt\/OptionParser.html#arg[A](name:String)(implicitevidence$10:scopt.Read[A]):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "note", "tail" : "(x: String): OptionDef[Unit, C]", "member" : "scopt.OptionParser.note", "link" : "scopt\/OptionParser.html#note(x:String):scopt.OptionDef[Unit,C]", "kind" : "def"}, {"label" : "opt", "tail" : "(x: Char, name: String)(arg0: Read[A]): OptionDef[A, C]", "member" : "scopt.OptionParser.opt", "link" : "scopt\/OptionParser.html#opt[A](x:Char,name:String)(implicitevidence$9:scopt.Read[A]):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "opt", "tail" : "(name: String)(arg0: Read[A]): OptionDef[A, C]", "member" : "scopt.OptionParser.opt", "link" : "scopt\/OptionParser.html#opt[A](name:String)(implicitevidence$8:scopt.Read[A]):scopt.OptionDef[A,C]", "kind" : "def"}, {"label" : "head", "tail" : "(xs: String*): OptionDef[Unit, C]", "member" : "scopt.OptionParser.head", "link" : "scopt\/OptionParser.html#head(xs:String*):scopt.OptionDef[Unit,C]", "kind" : "def"}, {"label" : "showTryHelp", "tail" : "(): Unit", "member" : "scopt.OptionParser.showTryHelp", "link" : "scopt\/OptionParser.html#showTryHelp():Unit", "kind" : "def"}, {"label" : "reportWarning", "tail" : "(msg: String): Unit", "member" : "scopt.OptionParser.reportWarning", "link" : "scopt\/OptionParser.html#reportWarning(msg:String):Unit", "kind" : "def"}, {"label" : "reportError", "tail" : "(msg: String): Unit", "member" : "scopt.OptionParser.reportError", "link" : "scopt\/OptionParser.html#reportError(msg:String):Unit", "kind" : "def"}, {"label" : "terminate", "tail" : "(exitState: Either[String, Unit]): Unit", "member" : "scopt.OptionParser.terminate", "link" : "scopt\/OptionParser.html#terminate(exitState:Either[String,Unit]):Unit", "kind" : "def"}, {"label" : "renderingMode", "tail" : "(): RenderingMode", "member" : "scopt.OptionParser.renderingMode", "link" : "scopt\/OptionParser.html#renderingMode:scopt.RenderingMode", "kind" : "def"}, {"label" : "showUsageOnError", "tail" : "(): Boolean", "member" : "scopt.OptionParser.showUsageOnError", "link" : "scopt\/OptionParser.html#showUsageOnError:Boolean", "kind" : "def"}, {"label" : "errorOnUnknownArgument", "tail" : "(): Boolean", "member" : "scopt.OptionParser.errorOnUnknownArgument", "link" : "scopt\/OptionParser.html#errorOnUnknownArgument:Boolean", "kind" : "def"}, {"label" : "helpOptions", "tail" : ": ListBuffer[OptionDef[_, C]]", "member" : "scopt.OptionParser.helpOptions", "link" : "scopt\/OptionParser.html#helpOptions:scala.collection.mutable.ListBuffer[scopt.OptionDef[_,C]]", "kind" : "val"}, {"label" : "options", "tail" : ": ListBuffer[OptionDef[_, C]]", "member" : "scopt.OptionParser.options", "link" : "scopt\/OptionParser.html#options:scala.collection.mutable.ListBuffer[scopt.OptionDef[_,C]]", "kind" : "val"}, {"member" : "scopt.OptionParser#<init>", "error" : "unsupported entity"}, {"label" : "programName", "tail" : ": String", "member" : "scopt.OptionParser.programName", "link" : "scopt\/OptionParser.html#programName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/OptionParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/OptionParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/OptionParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/OptionParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/OptionParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/OptionParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/OptionParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/OptionParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/OptionParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/OptionParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/OptionParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/OptionParser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/OptionParser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/OptionParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/OptionParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/OptionParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "scopt\/OptionParser.html", "kind" : "case class"}, {"name" : "scopt.Read", "members_trait" : [{"label" : "map", "tail" : "(f: (A) ⇒ B): Read[B]", "member" : "scopt.Read.map", "link" : "scopt\/Read.html#map[B](f:A=>B):scopt.Read[B]", "kind" : "def"}, {"label" : "tokensToRead", "tail" : "(): Int", "member" : "scopt.Read.tokensToRead", "link" : "scopt\/Read.html#tokensToRead:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/Read.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/Read.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/Read.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/Read.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/Read.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/Read.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/Read.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Read.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Read.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Read.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/Read.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/Read.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/Read.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/Read.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/Read.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/Read.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/Read.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/Read.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/Read.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reads", "tail" : "(): (String) ⇒ A", "member" : "scopt.Read.reads", "link" : "scopt\/Read.html#reads:String=>A", "kind" : "abstract def"}, {"label" : "arity", "tail" : "(): Int", "member" : "scopt.Read.arity", "link" : "scopt\/Read.html#arity:Int", "kind" : "abstract def"}], "shortDescription" : "", "object" : "scopt\/Read$.html", "members_object" : [{"label" : "seqTupleRead", "tail" : "(arg0: Read[K], arg1: Read[V]): Read[Seq[(K, V)]]", "member" : "scopt.Read.seqTupleRead", "link" : "scopt\/Read$.html#seqTupleRead[K,V](implicitevidence$6:scopt.Read[K],implicitevidence$7:scopt.Read[V]):scopt.Read[Seq[(K,V)]]", "kind" : "implicit def"}, {"label" : "mapRead", "tail" : "(arg0: Read[K], arg1: Read[V]): Read[Map[K, V]]", "member" : "scopt.Read.mapRead", "link" : "scopt\/Read$.html#mapRead[K,V](implicitevidence$4:scopt.Read[K],implicitevidence$5:scopt.Read[V]):scopt.Read[Map[K,V]]", "kind" : "implicit def"}, {"label" : "seqRead", "tail" : "(arg0: Read[A]): Read[Seq[A]]", "member" : "scopt.Read.seqRead", "link" : "scopt\/Read$.html#seqRead[A](implicitevidence$3:scopt.Read[A]):scopt.Read[Seq[A]]", "kind" : "implicit def"}, {"label" : "sep", "tail" : ": String", "member" : "scopt.Read.sep", "link" : "scopt\/Read$.html#sep:String", "kind" : "val"}, {"label" : "unitRead", "tail" : ": Read[Unit]", "member" : "scopt.Read.unitRead", "link" : "scopt\/Read$.html#unitRead:scopt.Read[Unit]", "kind" : "implicit val"}, {"label" : "tupleRead", "tail" : "(arg0: Read[A1], arg1: Read[A2]): Read[(A1, A2)]", "member" : "scopt.Read.tupleRead", "link" : "scopt\/Read$.html#tupleRead[A1,A2](implicitevidence$1:scopt.Read[A1],implicitevidence$2:scopt.Read[A2]):scopt.Read[(A1,A2)]", "kind" : "implicit def"}, {"label" : "durationRead", "tail" : ": Read[Duration]", "member" : "scopt.Read.durationRead", "link" : "scopt\/Read$.html#durationRead:scopt.Read[scala.concurrent.duration.Duration]", "kind" : "implicit val"}, {"label" : "inetAddress", "tail" : ": Read[InetAddress]", "member" : "scopt.Read.inetAddress", "link" : "scopt\/Read$.html#inetAddress:scopt.Read[java.net.InetAddress]", "kind" : "implicit val"}, {"label" : "uriRead", "tail" : ": Read[URI]", "member" : "scopt.Read.uriRead", "link" : "scopt\/Read$.html#uriRead:scopt.Read[java.net.URI]", "kind" : "implicit val"}, {"label" : "fileRead", "tail" : ": Read[File]", "member" : "scopt.Read.fileRead", "link" : "scopt\/Read$.html#fileRead:scopt.Read[java.io.File]", "kind" : "implicit val"}, {"label" : "calendarRead", "tail" : "(pattern: String, locale: Locale): Read[Calendar]", "member" : "scopt.Read.calendarRead", "link" : "scopt\/Read$.html#calendarRead(pattern:String,locale:java.util.Locale):scopt.Read[java.util.Calendar]", "kind" : "def"}, {"label" : "calendarRead", "tail" : "(pattern: String): Read[Calendar]", "member" : "scopt.Read.calendarRead", "link" : "scopt\/Read$.html#calendarRead(pattern:String):scopt.Read[java.util.Calendar]", "kind" : "def"}, {"label" : "yyyymmdddRead", "tail" : ": Read[Calendar]", "member" : "scopt.Read.yyyymmdddRead", "link" : "scopt\/Read$.html#yyyymmdddRead:scopt.Read[java.util.Calendar]", "kind" : "implicit val"}, {"label" : "bigDecimalRead", "tail" : ": Read[BigDecimal]", "member" : "scopt.Read.bigDecimalRead", "link" : "scopt\/Read$.html#bigDecimalRead:scopt.Read[BigDecimal]", "kind" : "implicit val"}, {"label" : "bigIntRead", "tail" : ": Read[BigInt]", "member" : "scopt.Read.bigIntRead", "link" : "scopt\/Read$.html#bigIntRead:scopt.Read[BigInt]", "kind" : "implicit val"}, {"label" : "longRead", "tail" : ": Read[Long]", "member" : "scopt.Read.longRead", "link" : "scopt\/Read$.html#longRead:scopt.Read[Long]", "kind" : "implicit val"}, {"label" : "booleanRead", "tail" : ": Read[Boolean]", "member" : "scopt.Read.booleanRead", "link" : "scopt\/Read$.html#booleanRead:scopt.Read[Boolean]", "kind" : "implicit val"}, {"label" : "doubleRead", "tail" : ": Read[Double]", "member" : "scopt.Read.doubleRead", "link" : "scopt\/Read$.html#doubleRead:scopt.Read[Double]", "kind" : "implicit val"}, {"label" : "stringRead", "tail" : ": Read[String]", "member" : "scopt.Read.stringRead", "link" : "scopt\/Read$.html#stringRead:scopt.Read[String]", "kind" : "implicit val"}, {"label" : "intRead", "tail" : ": Read[Int]", "member" : "scopt.Read.intRead", "link" : "scopt\/Read$.html#intRead:scopt.Read[Int]", "kind" : "implicit val"}, {"label" : "reads", "tail" : "(f: (String) ⇒ A): Read[A]", "member" : "scopt.Read.reads", "link" : "scopt\/Read$.html#reads[A](f:String=>A):scopt.Read[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/Read$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/Read$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/Read$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/Read$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/Read$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/Read$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/Read$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Read$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Read$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Read$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/Read$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/Read$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/Read$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/Read$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/Read$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/Read$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/Read$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/Read$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/Read$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scopt\/Read.html", "kind" : "trait"}, {"name" : "scopt.RenderingMode", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/RenderingMode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/RenderingMode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/RenderingMode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/RenderingMode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/RenderingMode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/RenderingMode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/RenderingMode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/RenderingMode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/RenderingMode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/RenderingMode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/RenderingMode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/RenderingMode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/RenderingMode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/RenderingMode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/RenderingMode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/RenderingMode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/RenderingMode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/RenderingMode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/RenderingMode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "scopt\/RenderingMode$.html", "members_object" : [{"label" : "TwoColumns", "tail" : "", "member" : "scopt.RenderingMode.TwoColumns", "link" : "scopt\/RenderingMode$.html#TwoColumns", "kind" : "object"}, {"label" : "OneColumn", "tail" : "", "member" : "scopt.RenderingMode.OneColumn", "link" : "scopt\/RenderingMode$.html#OneColumn", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/RenderingMode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/RenderingMode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/RenderingMode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/RenderingMode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/RenderingMode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/RenderingMode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/RenderingMode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/RenderingMode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/RenderingMode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/RenderingMode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/RenderingMode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/RenderingMode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/RenderingMode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/RenderingMode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/RenderingMode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/RenderingMode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/RenderingMode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/RenderingMode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/RenderingMode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scopt\/RenderingMode.html", "kind" : "trait"}, {"name" : "scopt.Validation", "shortDescription" : "", "object" : "scopt\/Validation$.html", "members_object" : [{"label" : "validateValue", "tail" : "(vs: Seq[(A) ⇒ Either[String, Unit]])(value: A): Either[Seq[String], Unit]", "member" : "scopt.Validation.validateValue", "link" : "scopt\/Validation$.html#validateValue[A](vs:Seq[A=>Either[String,Unit]])(value:A):Either[Seq[String],Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/Validation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/Validation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/Validation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/Validation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/Validation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/Validation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/Validation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Validation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Validation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Validation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/Validation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/Validation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/Validation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/Validation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/Validation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/Validation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/Validation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/Validation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/Validation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "scopt.Zero", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/Zero.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/Zero.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/Zero.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/Zero.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/Zero.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/Zero.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/Zero.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Zero.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Zero.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Zero.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/Zero.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/Zero.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/Zero.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/Zero.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/Zero.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/Zero.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/Zero.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/Zero.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/Zero.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zero", "tail" : "(): A", "member" : "scopt.Zero.zero", "link" : "scopt\/Zero.html#zero:A", "kind" : "abstract def"}], "shortDescription" : "", "object" : "scopt\/Zero$.html", "members_object" : [{"label" : "unitZero", "tail" : ": Zero[Unit]", "member" : "scopt.Zero.unitZero", "link" : "scopt\/Zero$.html#unitZero:scopt.Zero[Unit]", "kind" : "implicit val"}, {"label" : "intZero", "tail" : ": Zero[Int]", "member" : "scopt.Zero.intZero", "link" : "scopt\/Zero$.html#intZero:scopt.Zero[Int]", "kind" : "implicit val"}, {"label" : "zero", "tail" : "(f: ⇒ A): Zero[A]", "member" : "scopt.Zero.zero", "link" : "scopt\/Zero$.html#zero[A](f:=>A):scopt.Zero[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "scopt\/Zero$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "scopt\/Zero$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "scopt\/Zero$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "scopt\/Zero$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "scopt\/Zero$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "scopt\/Zero$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "scopt\/Zero$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Zero$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Zero$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "scopt\/Zero$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "scopt\/Zero$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "scopt\/Zero$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "scopt\/Zero$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "scopt\/Zero$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "scopt\/Zero$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "scopt\/Zero$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "scopt\/Zero$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "scopt\/Zero$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "scopt\/Zero$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "scopt\/Zero.html", "kind" : "trait"}]};